/* tslint:disable */
/* eslint-disable */
/**
 * Collins API
 * This site provides details on the various ways that you can integrate with Collins. Not sure you want to be here after all? Check out whatâ€™s new on the [London Bar Scene](https://www.designmynight.com/london/new-bar-spy) instead. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse401,
    InlineResponse401FromJSON,
    InlineResponse401ToJSON,
    InlineResponse404,
    InlineResponse404FromJSON,
    InlineResponse404ToJSON,
    InlineResponse429,
    InlineResponse429FromJSON,
    InlineResponse429ToJSON,
    PreferenceResponse,
    PreferenceResponseFromJSON,
    PreferenceResponseToJSON,
    VenueListResponse,
    VenueListResponseFromJSON,
    VenueListResponseToJSON,
    VenueResponse,
    VenueResponseFromJSON,
    VenueResponseToJSON,
} from '../models';

export interface GetAllVenuesRequest {
    status?: GetAllVenuesStatusEnum;
    title?: string;
    limit?: number;
    sort?: Array<string>;
    page?: string;
}

export interface GetVenueRequest {
    venueId: string;
}

export interface GetVenueMarketingPreferencesRequest {
    venueId: string;
}

/**
 * 
 */
export class VenuesApi extends runtime.BaseAPI {

    /**
     * Returns an array of all venues which the authenticated user is authorised to view. The response will be [paginated](/#tag/Pagination).
     * Get venues
     */
    async getAllVenuesRaw(requestParameters: GetAllVenuesRequest): Promise<runtime.ApiResponse<VenueListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.title !== undefined) {
            queryParameters['title'] = requestParameters.title;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/venues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueListResponseFromJSON(jsonValue));
    }

    /**
     * Returns an array of all venues which the authenticated user is authorised to view. The response will be [paginated](/#tag/Pagination).
     * Get venues
     */
    async getAllVenues(requestParameters: GetAllVenuesRequest): Promise<VenueListResponse> {
        const response = await this.getAllVenuesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns details about a specific venue
     * Get a venue
     */
    async getVenueRaw(requestParameters: GetVenueRequest): Promise<runtime.ApiResponse<VenueResponse>> {
        if (requestParameters.venueId === null || requestParameters.venueId === undefined) {
            throw new runtime.RequiredError('venueId','Required parameter requestParameters.venueId was null or undefined when calling getVenue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/venues/{venueId}`.replace(`{${"venueId"}}`, encodeURIComponent(String(requestParameters.venueId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueResponseFromJSON(jsonValue));
    }

    /**
     * Returns details about a specific venue
     * Get a venue
     */
    async getVenue(requestParameters: GetVenueRequest): Promise<VenueResponse> {
        const response = await this.getVenueRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an array of active marketing preferences for the given venue. An active marketing preference is one which has been set up on the venue group level and activated on the individual venue. 
     * Get active marketing preferences
     */
    async getVenueMarketingPreferencesRaw(requestParameters: GetVenueMarketingPreferencesRequest): Promise<runtime.ApiResponse<Array<PreferenceResponse>>> {
        if (requestParameters.venueId === null || requestParameters.venueId === undefined) {
            throw new runtime.RequiredError('venueId','Required parameter requestParameters.venueId was null or undefined when calling getVenueMarketingPreferences.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/venues/{venueId}/marketing-preferences`.replace(`{${"venueId"}}`, encodeURIComponent(String(requestParameters.venueId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PreferenceResponseFromJSON));
    }

    /**
     * Returns an array of active marketing preferences for the given venue. An active marketing preference is one which has been set up on the venue group level and activated on the individual venue. 
     * Get active marketing preferences
     */
    async getVenueMarketingPreferences(requestParameters: GetVenueMarketingPreferencesRequest): Promise<Array<PreferenceResponse>> {
        const response = await this.getVenueMarketingPreferencesRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetAllVenuesStatusEnum {
    Public = 'public',
    Private = 'private',
    Inactive = 'inactive'
}
