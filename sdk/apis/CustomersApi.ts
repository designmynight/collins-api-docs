/* tslint:disable */
/* eslint-disable */
/**
 * Collins API
 * This site provides details on the various ways that you can integrate with Collins. Not sure you want to be here after all? Check out whatâ€™s new on the [London Bar Scene](https://www.designmynight.com/london/new-bar-spy) instead. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerListResponse,
    CustomerListResponseFromJSON,
    CustomerListResponseToJSON,
    CustomerResponse,
    CustomerResponseFromJSON,
    CustomerResponseToJSON,
    InlineResponse401,
    InlineResponse401FromJSON,
    InlineResponse401ToJSON,
    InlineResponse404,
    InlineResponse404FromJSON,
    InlineResponse404ToJSON,
    InlineResponse429,
    InlineResponse429FromJSON,
    InlineResponse429ToJSON,
    NewCustomerRequest,
    NewCustomerRequestFromJSON,
    NewCustomerRequestToJSON,
    ViewCustomer,
    ViewCustomerFromJSON,
    ViewCustomerToJSON,
} from '../models';

export interface CreateCustomerRequest {
    newCustomerRequest: NewCustomerRequest;
}

export interface DeleteCustomerRequest {
    customerId: string;
}

export interface GetAllCustomersRequest {
    associatedVenues?: Array<string>;
    bookingDate?: Date;
    bookingDateFrom?: Date;
    bookingDateTo?: Date;
    createdDate?: Date;
    createdDateFrom?: Date;
    createdDateTo?: Date;
    dobMonth?: number;
    email?: Array<string>;
    fullName?: string;
    labels?: Array<string>;
    lastUpdated?: Date;
    lastUpdatedFrom?: Date;
    lastUpdatedTo?: Date;
    optedIn?: Array<string>;
    optedInDate?: Date;
    optedInDateFrom?: Date;
    optedInDateTo?: Date;
    optedOut?: Array<string>;
    optedOutDate?: Date;
    optedOutDateFrom?: Date;
    optedOutDateTo?: Date;
    query?: string;
    limit?: number;
    sort?: Array<string>;
    page?: string;
}

export interface GetCustomerRequest {
    customerId: string;
}

export interface UpdateCustomerRequest {
    customerId: string;
    viewCustomer: ViewCustomer;
}

/**
 * 
 */
export class CustomersApi extends runtime.BaseAPI {

    /**
     * Creates a new customer
     * Create a customer
     */
    async createCustomerRaw(requestParameters: CreateCustomerRequest): Promise<runtime.ApiResponse<CustomerResponse>> {
        if (requestParameters.newCustomerRequest === null || requestParameters.newCustomerRequest === undefined) {
            throw new runtime.RequiredError('newCustomerRequest','Required parameter requestParameters.newCustomerRequest was null or undefined when calling createCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewCustomerRequestToJSON(requestParameters.newCustomerRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new customer
     * Create a customer
     */
    async createCustomer(requestParameters: CreateCustomerRequest): Promise<CustomerResponse> {
        const response = await this.createCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an existing customer
     * Delete a customer
     */
    async deleteCustomerRaw(requestParameters: DeleteCustomerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling deleteCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an existing customer
     * Delete a customer
     */
    async deleteCustomer(requestParameters: DeleteCustomerRequest): Promise<void> {
        await this.deleteCustomerRaw(requestParameters);
    }

    /**
     * Returns an array of all customers which the authenticated user is authorised to view. The response will be [paginated](/#tag/Pagination).
     * Get customers
     */
    async getAllCustomersRaw(requestParameters: GetAllCustomersRequest): Promise<runtime.ApiResponse<CustomerListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.associatedVenues) {
            queryParameters['associated_venues'] = requestParameters.associatedVenues.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.bookingDate !== undefined) {
            queryParameters['booking_date'] = (requestParameters.bookingDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.bookingDateFrom !== undefined) {
            queryParameters['booking_date_from'] = (requestParameters.bookingDateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.bookingDateTo !== undefined) {
            queryParameters['booking_date_to'] = (requestParameters.bookingDateTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.createdDate !== undefined) {
            queryParameters['created_date'] = (requestParameters.createdDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.createdDateFrom !== undefined) {
            queryParameters['created_date_from'] = (requestParameters.createdDateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.createdDateTo !== undefined) {
            queryParameters['created_date_to'] = (requestParameters.createdDateTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.dobMonth !== undefined) {
            queryParameters['dob_month'] = requestParameters.dobMonth;
        }

        if (requestParameters.email) {
            queryParameters['email'] = requestParameters.email.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fullName !== undefined) {
            queryParameters['full_name'] = requestParameters.fullName;
        }

        if (requestParameters.labels) {
            queryParameters['labels'] = requestParameters.labels.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.lastUpdated !== undefined) {
            queryParameters['last_updated'] = (requestParameters.lastUpdated as any).toISOString().substr(0,10);
        }

        if (requestParameters.lastUpdatedFrom !== undefined) {
            queryParameters['last_updated_from'] = (requestParameters.lastUpdatedFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.lastUpdatedTo !== undefined) {
            queryParameters['last_updated_to'] = (requestParameters.lastUpdatedTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.optedIn) {
            queryParameters['opted_in'] = requestParameters.optedIn.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.optedInDate !== undefined) {
            queryParameters['opted_in_date'] = (requestParameters.optedInDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.optedInDateFrom !== undefined) {
            queryParameters['opted_in_date_from'] = (requestParameters.optedInDateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.optedInDateTo !== undefined) {
            queryParameters['opted_in_date_to'] = (requestParameters.optedInDateTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.optedOut) {
            queryParameters['opted_out'] = requestParameters.optedOut.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.optedOutDate !== undefined) {
            queryParameters['opted_out_date'] = (requestParameters.optedOutDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.optedOutDateFrom !== undefined) {
            queryParameters['opted_out_date_from'] = (requestParameters.optedOutDateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.optedOutDateTo !== undefined) {
            queryParameters['opted_out_date_to'] = (requestParameters.optedOutDateTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerListResponseFromJSON(jsonValue));
    }

    /**
     * Returns an array of all customers which the authenticated user is authorised to view. The response will be [paginated](/#tag/Pagination).
     * Get customers
     */
    async getAllCustomers(requestParameters: GetAllCustomersRequest): Promise<CustomerListResponse> {
        const response = await this.getAllCustomersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns details about a specific customer
     * Get a customer
     */
    async getCustomerRaw(requestParameters: GetCustomerRequest): Promise<runtime.ApiResponse<CustomerResponse>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
    }

    /**
     * Returns details about a specific customer
     * Get a customer
     */
    async getCustomer(requestParameters: GetCustomerRequest): Promise<CustomerResponse> {
        const response = await this.getCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an existing customer
     * Update a customer
     */
    async updateCustomerRaw(requestParameters: UpdateCustomerRequest): Promise<runtime.ApiResponse<CustomerResponse>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling updateCustomer.');
        }

        if (requestParameters.viewCustomer === null || requestParameters.viewCustomer === undefined) {
            throw new runtime.RequiredError('viewCustomer','Required parameter requestParameters.viewCustomer was null or undefined when calling updateCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ViewCustomerToJSON(requestParameters.viewCustomer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerResponseFromJSON(jsonValue));
    }

    /**
     * Updates an existing customer
     * Update a customer
     */
    async updateCustomer(requestParameters: UpdateCustomerRequest): Promise<CustomerResponse> {
        const response = await this.updateCustomerRaw(requestParameters);
        return await response.value();
    }

}
